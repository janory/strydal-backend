buildscript {
    ext {
        kotlinVersion = "1.2.51"
        springBootVersion = "2.0.5.RELEASE"
        exposedVersion = "0.10.5"
        dockerVersion = "0.20.1"
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${dockerVersion}")
    }
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.palantir.docker"


group = "com.strydal"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { setUrl("https://dl.bintray.com/kotlin/exposed") }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("org.jetbrains.exposed:exposed:$exposedVersion")
    compile("org.jetbrains.exposed:spring-transaction:$exposedVersion")
    compile("org.postgresql:postgresql")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

bootJar {
    baseName = "strydal-backend"
    version = "0.0.1"
}

task prepareDockerfile {
    doLast {
        def dockerfileTemplate = new File("${project.buildDir}/docker/Dockerfile").getText('UTF-8')
        def dockerfile = dockerfileTemplate.replaceAll('\\$\\{JAR_FILE}', bootJar.archiveName)
        new File("${project.buildDir}/docker/Dockerfile").write(dockerfile, 'UTF-8')
    }
}

docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    files bootJar.archivePath, "now.json"
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

task prepareDeployment(type: Copy) {
    dependsOn "docker", "prepareDockerfile"
    from "${project.buildDir}/docker"
    into "${project.buildDir}/strydal-backend/"
}
